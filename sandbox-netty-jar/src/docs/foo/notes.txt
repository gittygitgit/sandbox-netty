multiple targets
one message loader
send each loaded message to each target
each client joins group on connection
loader sends to each group member

Components:
MessageGenerator 
	- Generates a message on demand 
	- Maintains a registry of MessageListeners
	- Broadcasts generated messages to registered MessageListeners

MessageGeneratorTask
	- Invokes a MessageGenerator
	
MessageListener
	- Invoked by a MessageGenerator on the arrival of new messages
	
Session
	- A logical grouping of data 
	- A current day's session may be subscribed to using a SessionRequest
	- Has a last sequence number representing the sequence number of the last message broadcast to Subscribers
	

ActiveSession
	- A Session that is accepting new subscribers and broadcasting new data.

SessionRequest
	- Represents the session id and first sequence number that a client is requesting


SessionRerequest
	- Represents a SessionRequest by a specific client for "old" data, either previously broadcast from the current session or an old session

Subscription
	- Represents a client interested in receiving messages from an ActiveSession
	- Acts as a MessageListener
	- May be associated with a Rewind / Replay 
	- Messages received by a subscription with an active SessionRetransmission are queued until notified that said Rewind / Replay are complete

	
SessionRewind 
	- Rewind, replay and unicast transmission of ActiveSession data to a single subscriber
		
SessionPull
	- Retrieval of inactive session data and unicasting it to a single target

SessionHandler
	- Determines whether a SessionRequest for a newly created channel is for the current session or a previous session
	- If the SessionRequest is for prior session, the channel will not be added to the broadcast
	- If the SessionRequest is for the current session, the request will be added to the broadcast marked as retransmit
	

SessionRetransmission
	- Represents a unicast feed of data associated with a SessionRerequest
	- Associated with a single Subscription


SessionRoller
	- Creates a new session
	- 
	
Server
	- Maintains an ActiveSession
	- Broadcasts messages for an ActiveSession
	- Processes SessionPull requests 
	- Processes subscription requests
	- Maintains a SubscriptionList
	- 
	
SubscriptionList
	- Represents all active subscriptions of an ActiveSession
	- New 	
	
	
How do ChannelHandlers fit into the model?
Does a ChannelHandler cound as a component?
A ChannelHandler is a part of the Netty layered protocol architecture.
In Netty, each layer of the protocol stack handles some aspect of servicing either an inbound request or an outbound message.

	

	
	
SessionRerequest

SessionRetransmissionListener
	- Notified when a retransmission has completed

Session retransmitter
	- 
	
MessageGenHandler
	- 	

old session or existing session


SessionRequestHandler
	- Determines whether  	

Decide if new group member wants previously streamed data.
	- If request
	
	
If so 
New group member 

	- 
	
	
	
	
Test
Goal
Demonstrate multicasting without using IP multicast

Generate messages on demand
Support group membership
Send incoming messages to group members


Start Server
Server creates new channels for each new client connection
The server maintains a single MessageGenerator whose messages are sent to all active channels
The messageGenerator is a singleton
The messageGenerator is registered within a ChannelHandler that implements MessageListener
This ChannelHandler maintains a special ChannelGroup that implements MessageListener
When the first channel is created, the 
All channels are 
on receiving the first client connection, server registers the channel in a new ChannelGroup and registers the channel group with the MessageGenerator as a MessageListener
starts the message generator


The message generator 

multiple clients

What is a session?
Data generated / accumulated for a given identified store

What is meant to request a session?
A client want to receive a particular store's data

Streaming data
Gets streamed out to all subscribers


Problem
Someone subscribes late.  How can he catch up and then join the subscription?

Not video, just data
Acquisition delay


rerequest server

cache certain amount of data
hit db, join group, cache multicast traffic while unicast transmission occurs, then release cached data

gather data, then acquire multicast lock, load gap from cache, join multicast group, then release multicast lock.


http://www.faqs.org/rfcs/rfc6285.html





Feed